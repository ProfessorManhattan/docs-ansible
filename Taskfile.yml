---
version: '3'

includes:
  ansible: ./.config/taskfiles/ansible/Taskfile.yml
  ansible:ansibler: ./.config/taskfiles/ansible/Taskfile-ansibler.yml
  ansible:playbook: ./.config/taskfiles/ansible/Taskfile-playbook.yml
  ansible:populate: ./.config/taskfiles/ansible/Taskfile-populate.yml
  ansible:test: ./.config/taskfiles/ansible/Taskfile-test.yml
  boilerplate: ./.config/taskfiles/boilerplate/Taskfile.yml
  ci: ./.config/taskfiles/ci/Taskfile.yml
  common: ./.config/taskfiles/common/Taskfile.yml
  common:code: ./.config/taskfiles/common/Taskfile-code.yml
  common:update: ./.config/taskfiles/common/Taskfile-update.yml
  docker: ./.config/taskfiles/docker/Taskfile.yml
  docker:build: ./.config/taskfiles/docker/Taskfile-build.yml
  docker:test: ./.config/taskfiles/docker/Taskfile-test.yml
  docker:update: ./.config/taskfiles/docker/Taskfile-update.yml
  fix: ./.config/taskfiles/fix/Taskfile.yml
  git: ./.config/taskfiles/git/Taskfile.yml
  go: ./.config/taskfiles/go/Taskfile.yml
  go:test: ./.config/taskfiles/go/Taskfile-test.yml
  image: ./.config/taskfiles/image/Taskfile.yml
  install: ./.config/taskfiles/install/Taskfile.yml
  install:go: ./.config/taskfiles/install/Taskfile-go.yml
  install:npm: ./.config/taskfiles/install/Taskfile-npm.yml
  install:python: ./.config/taskfiles/install/Taskfile-python.yml
  install:software: ./.config/taskfiles/install/Taskfile-software.yml
  lint: ./.config/taskfiles/lint/Taskfile.yml
  lint:esprint: ./.config/taskfiles/lint/Taskfile-esprint.yml
  lint:markdown: ./.config/taskfiles/lint/Taskfile-markdown.yml
  lint:prose: ./.config/taskfiles/lint/Taskfile-prose.yml
  nest: ./.config/taskfiles/nest/Taskfile.yml
  npm: ./.config/taskfiles/npm/Taskfile.yml
  npm:cov: ./.config/taskfiles/npm/Taskfile-cov.yml
  npm:doc: ./.config/taskfiles/npm/Taskfile-doc.yml
  packer: ./.config/taskfiles/packer/Taskfile.yml
  packer:build: ./.config/taskfiles/packer/Taskfile-build.yml
  packer:update: ./.config/taskfiles/packer/Taskfile-update.yml
  publish: ./.config/taskfiles/publish/Taskfile.yml
  publish:android: ./.config/taskfiles/publish/Taskfile-android.yml
  publish:brew: ./.config/taskfiles/publish/Taskfile-brew.yml
  publish:chrome: ./.config/taskfiles/publish/Taskfile-chrome.yml
  publish:firefox: ./.config/taskfiles/publish/Taskfile-firefox.yml
  publish:ios: ./.config/taskfiles/publish/Taskfile-ios.yml
  publish:menubar: ./.config/taskfiles/publish/Taskfile-menubar.yml
  publish:opera: ./.config/taskfiles/publish/Taskfile-opera.yml
  python: ./.config/taskfiles/python/Taskfile.yml
  python:test: ./.config/taskfiles/python/Taskfile-test.yml
  security: ./.config/taskfiles/security/Taskfile.yml
  symlink: ./.config/taskfiles/symlink/Taskfile.yml
  upstream: ./.config/taskfiles/upstream/Taskfile.yml
  upstream:common: ./.config/taskfiles/upstream/Taskfile-common.yml
  upstream:commondocs: ./.config/taskfiles/upstream/Taskfile-commondocs.yml
  upstream:docs: ./.config/taskfiles/upstream/Taskfile-docs.yml
  upstream:project: ./.config/taskfiles/upstream/Taskfile-project.yml
  upstream:shared: ./.config/taskfiles/upstream/Taskfile-shared.yml
  vscode: ./.config/taskfiles/vscode/Taskfile.yml

output: interleaved

vars:
  DOCKERHUB_PROFILE: megabytelabs
  GITHUB_ORG: ProfessorManhattan
  GITHUB_USER: ProfessorManhattan
  IGNORE_FOLDERS: -path './.autodoc/*' -o -path './.cache/*' -o -path './.common*' -o -path './.config/*' -o -path './.git/*'
    -o -path './.github/*' -o -path './.gitlab/*' -o -path './.husky/*' -o -path './.modules/*' -o -path './.npm/*'
    -o -path './.pnpm-store/*' -o -path './.shared/*' -o -path './.task/*' -o -path './.venv/*' -o -path './.vscode/*'
    -o -path './build/*' -o -path './dist/*' -o -path './node_modules/*' -o -path './venv/*' -o -name pnpm-lock.yaml
    -o -name package-lock.json -o -name poetry.lock -o -name '.variables.json'
  NPM_PROGRAM: npm
  NPX_HANDLE: ''
  NPX_PACKAGE: npx
  REPOSITORY_SUBTYPE: ansible
  REPOSITORY_TYPE: documentation
  TIMEZONE: America/New_York

tasks:
  donothing: 'echo {{urlquery "megabyte-labs/hey"}}'

  start:
    desc: Set up the project and refresh it with the latest changes
    summary: |
      # Set up the project

      This task will scaffold the project with the latest upstream changes
      and ensure your development environment has all the dependencies installed.

      **Example usage:**
      `task start`
    cmds:
      - task: upstream:docs

  group:exec:
    desc: Execute a shell script across all repositories in a group and commit the changes
    summary: |
      # Execute script across entire groups of GitLab repositories

      This task will recursively compile a list of all projects that are in a group and its'
      subgroups and then execute a command in each of the repositories.

      **Example (in the format task taskName -- gitlabGroup ---- commandsToRun):**
      `task {{.TASK}} -- megabyte-labs/ansible-roles ---- rm .ansible-lint; git add --all; git commit; git push; etc.`
    cmds:
      - task: group:repositories
        vars:
          CLI_ARGS: '{{index (splitList " ---- " .CLI_ARGS) 0}}'
      - |
        BASE_PWD="$PWD"
        function execRepo() {
          REPO_DETAILS="$1"
          REPO_URL="$(echo $REPO_DETAILS | sed 's/\s.*$//')"
          REPO_PATH="$(echo $REPO_DETAILS | sed 's/^.*\s//')"
          DIR_NAME="$(dirname $REPO_PATH)"
          mkdir -p "$DIR_NAME"
          if [ -d "$REPO_PATH" ]; then
            cd "$REPO_PATH"
            git reset --hard HEAD
            git clean -fxd
            git pull origin master
            cd "$BASE_PWD"
          else
            git clone --depth=1 "$REPO_URL" "$REPO_PATH"
          fi
          cd "$REPO_PATH"
          bash -c '{{index (splitList " ---- " .CLI_ARGS) 1}}'
          cd "$BASE_PWD"
        }
        cat repository-list.txt | while IFS= read -r REPO_DETAILS; do
          execRepo "$REPO_DETAILS" &
        done
        wait

  group:repositories:
    deps:
      - install:software:glab
      - install:software:jq
    summary: |
      # Return repositories belonging to group and sub-groups

      Given a GitLab group path (which can include subgroups as well), this task will cycle through
      the group and its' subgroups and generate a list of repositories. The repositories are
      saved to a file called `repository-list.txt`.

      **Example specifying a group and subgroup:**
      `task git:gitlab:group:repositories -- megabyte-labs/ansible-roles`

      **Example opening an interactive prompt:**
      `task git:gitlab:group:repositories`
    cmds:
      - rm -f repository-list.txt
      - task: group:repositories:{{if .CLI_ARGS}}loop{{else}}prompt{{end}}

  group:repositories:loop:
    cmds:
      - glab api "groups/{{urlquery .CLI_ARGS}}" | jq -r '.projects[] | .ssh_url_to_repo + "   " + .path_with_namespace' >> repository-list.txt
      - |
        SUBGROUPS="$(glab api groups/{{urlquery .CLI_ARGS}}/subgroups | jq -r '.[] | .full_path')"
        echo "$SUBGROUPS"
        if [ -n "$SUBGROUPS" ]; then
          echo "$SUBGROUPS" | while IFS= read -r SUBGROUP; do
            task {{.TASK}} -- "$SUBGROUP" &
          done
        fi
        wait

  group:repositories:prompt: 'echo hey'
